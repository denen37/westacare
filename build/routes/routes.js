"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require('express');
const router = express.Router();
const account_1 = require("../controllers/account");
const appointment_1 = require("../controllers/appointment");
const auth_1 = require("../controllers/auth");
const favorite_1 = require("../controllers/favorite");
const notification_1 = require("../controllers/notification");
const payment_1 = require("../controllers/payment");
const profile_1 = require("../controllers/profile");
const referral_1 = require("../controllers/referral");
const reminder_1 = require("../controllers/reminder");
const upload_1 = require("../services/upload");
const allowRoles_1 = require("../middleware/allowRoles");
const feedback_1 = require("../controllers/feedback");
const User_1 = require("../models/User");
const availability_1 = require("../controllers/availability");
const test_report_1 = require("../controllers/test_report");
const wallet_1 = require("../controllers/wallet");
const transaction_1 = require("../controllers/transaction");
router.post('/auth/seeker/register', auth_1.registerSeeker);
router.post('/auth/provider/register', auth_1.registerProvider);
router.post('/auth/send-otp', auth_1.sendOTP);
router.post('/auth/verify-otp', auth_1.verifyOTP);
router.post('/auth/login', auth_1.login);
router.get('/auth/me', profile_1.me);
router.post('/auth/reset-password', auth_1.resetPassword);
router.post('/auth/change-password', auth_1.changePassword);
router.get('/dashboard', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER, User_1.UserRole.PROVIDER), profile_1.dashboard);
router.post('/upload-avatar', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER, User_1.UserRole.PROVIDER), upload_1.uploads.single('avatar'), profile_1.uploadAvatar);
router.post('/providers/create-profile', (0, allowRoles_1.allowRoles)(User_1.UserRole.PROVIDER), profile_1.createProviderProfile1);
router.post('/providers/update-profile', (0, allowRoles_1.allowRoles)(User_1.UserRole.PROVIDER), profile_1.updateProfile2);
router.post('/providers/update-any', (0, allowRoles_1.allowRoles)(User_1.UserRole.PROVIDER), profile_1.updateProviderProfile);
router.post('/providers/upload-credential', (0, allowRoles_1.allowRoles)(User_1.UserRole.PROVIDER), upload_1.uploads.single('file'), profile_1.upload_credential);
router.get('/providers', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), profile_1.getProviders);
router.get('/providers/profile/:providerId', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), profile_1.getProfileById);
router.post('/seekers/update-profile1', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), profile_1.updateSeekerProfile1);
router.post('/seekers/update-profile2', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), profile_1.updateSeekerProfile2);
router.post('/seekers/update-any', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), profile_1.updateSeekerProfile);
router.get('/appointments', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER, User_1.UserRole.PROVIDER), appointment_1.getAppointments);
router.get('/appointments/:id', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER, User_1.UserRole.PROVIDER), appointment_1.getAppointmentById);
router.post('/appointments', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), appointment_1.createAppointment);
router.post('/appointments/cancel/:id', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), appointment_1.cancelAppointment);
router.post('/appointments/complete/:id', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), appointment_1.completeAppointment);
router.post('/appointments/reschedule/:id', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), appointment_1.rescheduleAppointment);
router.get('/availabilities', (0, allowRoles_1.allowRoles)(User_1.UserRole.PROVIDER), availability_1.getAvailablities);
router.get('/availabilities/:id', (0, allowRoles_1.allowRoles)(User_1.UserRole.PROVIDER), availability_1.getAvailability);
router.post('/availabilities', (0, allowRoles_1.allowRoles)(User_1.UserRole.PROVIDER), availability_1.createAvailablity);
router.put('/availabilities/:id', (0, allowRoles_1.allowRoles)(User_1.UserRole.PROVIDER), availability_1.updateAvailability);
router.delete('/availabilities/:id', (0, allowRoles_1.allowRoles)(User_1.UserRole.PROVIDER), availability_1.deleteAvailability);
router.get('/testreports', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER, User_1.UserRole.PROVIDER), test_report_1.getAllTestReports);
router.get('/testreports/:id', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER, User_1.UserRole.PROVIDER), test_report_1.getTestReportById);
router.post('/testreports', (0, allowRoles_1.allowRoles)(User_1.UserRole.PROVIDER), test_report_1.createTestReport);
router.put('/testreports/:id', (0, allowRoles_1.allowRoles)(User_1.UserRole.PROVIDER), test_report_1.updateTestReport);
router.delete('/testreports/:id', (0, allowRoles_1.allowRoles)(User_1.UserRole.PROVIDER), test_report_1.deleteTestReport);
router.get('/referrals', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER, User_1.UserRole.PROVIDER), referral_1.getMyReferrals);
router.get('/referrals/:id', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER, User_1.UserRole.PROVIDER), referral_1.getReferralById);
router.post('/referrals', (0, allowRoles_1.allowRoles)(User_1.UserRole.PROVIDER), referral_1.createReferral);
router.get('/reminders', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), reminder_1.getAllMyReminders);
router.get('/reminders/:id', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), reminder_1.getReminder);
router.post('/reminders', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), reminder_1.createReminder);
router.put('/reminders/:id', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), reminder_1.updateReminder);
router.delete('/reminders/:id', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), reminder_1.deleteReminder);
router.get('/notifications', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER, User_1.UserRole.PROVIDER), notification_1.getAllNotifications);
router.get('/notifications/:id', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER, User_1.UserRole.PROVIDER), notification_1.getNotificationById);
router.delete('/notifications/:id', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER, User_1.UserRole.PROVIDER), notification_1.deleteNotification);
router.post('/read-notification/:id', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER, User_1.UserRole.PROVIDER), notification_1.readNotification);
//router.post('/get-unread-notification-count', allowRoles(UserRole.SEEKER, UserRole.PROVIDER), getUnreadNotificationCount);
router.post('refresh-device-token', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER, User_1.UserRole.PROVIDER), notification_1.refreshDeviceToken);
router.get('/favourites', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), favorite_1.getAllFavorites);
router.post('/favourites', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), favorite_1.addFavorite);
router.delete('/favourites/:providerId', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), favorite_1.removeFavorite);
router.get('/accounts/banks', (0, allowRoles_1.allowRoles)(User_1.UserRole.PROVIDER), account_1.getBanks);
router.post('/accounts', (0, allowRoles_1.allowRoles)(User_1.UserRole.PROVIDER), account_1.addAccount);
router.get('/accounts', (0, allowRoles_1.allowRoles)(User_1.UserRole.PROVIDER), account_1.getAccounts);
router.post('/payments/initiate-payment', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), payment_1.initiatePayment);
router.post('/payments/verify-payment/:ref', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), payment_1.verifyPayment);
router.post('/payments/initiate-transfer', (0, allowRoles_1.allowRoles)(User_1.UserRole.PROVIDER), payment_1.initiateTransfer);
router.post('/debit-wallet', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), wallet_1.debitWallet);
router.post('/set-pin', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), wallet_1.setPin);
router.get('/transactions', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER, User_1.UserRole.PROVIDER), transaction_1.getAllTransactions);
router.get('/transactions/:id', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER, User_1.UserRole.PROVIDER), transaction_1.getTransactionById);
router.post('/feedbacks', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), feedback_1.giveFeedback);
router.get('/feedbacks', (0, allowRoles_1.allowRoles)(User_1.UserRole.PROVIDER), feedback_1.getFeedbacks);
router.put('/feedbacks', (0, allowRoles_1.allowRoles)(User_1.UserRole.SEEKER), feedback_1.updateFeedback);
exports.default = router;
